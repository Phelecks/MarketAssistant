// <auto-generated />
using System;
using BlockChainIdentity.Infrastructure.Persistence;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace BlockChainIdentity.Infrastructure.Persistence.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("BlockChainIdentity.Domain.Entities.BaseParameter", b =>
                {
                    b.Property<long>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("id"));

                    b.Property<int>("category")
                        .HasColumnType("int");

                    b.Property<DateTime>("created")
                        .HasColumnType("datetime2");

                    b.Property<string>("createdBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("field")
                        .HasColumnType("int");

                    b.Property<long>("kernelBaseParameterId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("lastModified")
                        .HasColumnType("datetime2");

                    b.Property<string>("lastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("value")
                        .IsRequired()
                        .HasMaxLength(512)
                        .HasColumnType("nvarchar(512)");

                    b.HasKey("id");

                    b.HasIndex("field")
                        .IsUnique();

                    b.ToTable("BaseParameter", (string)null);
                });

            modelBuilder.Entity("BlockChainIdentity.Domain.Entities.Client", b =>
                {
                    b.Property<long>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("id"));

                    b.Property<string>("clientId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("clientSecret")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("created")
                        .HasColumnType("datetime2");

                    b.Property<string>("createdBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("enabled")
                        .HasColumnType("bit");

                    b.Property<DateTime>("lastModified")
                        .HasColumnType("datetime2");

                    b.Property<string>("lastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("statement")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("tokenLifeTimeInSeconds")
                        .HasColumnType("int");

                    b.Property<string>("uri")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("version")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("id");

                    b.HasIndex("clientId")
                        .IsUnique();

                    b.ToTable("Client", (string)null);
                });

            modelBuilder.Entity("BlockChainIdentity.Domain.Entities.ClientResource", b =>
                {
                    b.Property<long>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("id"));

                    b.Property<long>("clientId")
                        .HasColumnType("bigint");

                    b.Property<long>("resourceId")
                        .HasColumnType("bigint");

                    b.HasKey("id");

                    b.HasIndex("clientId");

                    b.HasIndex("resourceId");

                    b.ToTable("ClientResource", (string)null);
                });

            modelBuilder.Entity("BlockChainIdentity.Domain.Entities.Resource", b =>
                {
                    b.Property<long>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("id"));

                    b.Property<DateTime>("created")
                        .HasColumnType("datetime2");

                    b.Property<string>("createdBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("lastModified")
                        .HasColumnType("datetime2");

                    b.Property<string>("lastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("title")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("id");

                    b.HasIndex("title")
                        .IsUnique();

                    b.ToTable("Resource", (string)null);
                });

            modelBuilder.Entity("BlockChainIdentity.Domain.Entities.Role", b =>
                {
                    b.Property<long>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("id"));

                    b.Property<DateTime>("created")
                        .HasColumnType("datetime2");

                    b.Property<string>("createdBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("lastModified")
                        .HasColumnType("datetime2");

                    b.Property<string>("lastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("title")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("id");

                    b.HasIndex("title")
                        .IsUnique();

                    b.ToTable("Role", (string)null);
                });

            modelBuilder.Entity("BlockChainIdentity.Domain.Entities.Token", b =>
                {
                    b.Property<long>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("id"));

                    b.Property<bool>("enabled")
                        .HasColumnType("bit");

                    b.Property<DateTime>("expireAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("issuedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("nonce")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("notBefore")
                        .HasColumnType("datetime2");

                    b.Property<string>("requestId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("resources")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("statement")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("uri")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("version")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("walletAddress")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("id");

                    b.HasIndex("walletAddress");

                    b.ToTable("Token", (string)null);
                });

            modelBuilder.Entity("BlockChainIdentity.Domain.Entities.Wallet", b =>
                {
                    b.Property<string>("address")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("chainId")
                        .HasColumnType("int");

                    b.Property<DateTime>("created")
                        .HasColumnType("datetime2");

                    b.Property<string>("createdBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("lastModified")
                        .HasColumnType("datetime2");

                    b.Property<string>("lastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("address");

                    b.HasIndex("address", "chainId")
                        .IsUnique();

                    b.ToTable("Wallet", (string)null);
                });

            modelBuilder.Entity("BlockChainIdentity.Domain.Entities.WalletRole", b =>
                {
                    b.Property<long>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("id"));

                    b.Property<DateTime>("created")
                        .HasColumnType("datetime2");

                    b.Property<string>("createdBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("lastModified")
                        .HasColumnType("datetime2");

                    b.Property<string>("lastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("roleId")
                        .HasColumnType("bigint");

                    b.Property<string>("walletAddress")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("id");

                    b.HasIndex("roleId");

                    b.HasIndex("walletAddress");

                    b.ToTable("WalletRole", (string)null);
                });

            modelBuilder.Entity("BlockChainIdentity.Domain.Entities.ClientResource", b =>
                {
                    b.HasOne("BlockChainIdentity.Domain.Entities.Client", "client")
                        .WithMany("clientResources")
                        .HasForeignKey("clientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BlockChainIdentity.Domain.Entities.Resource", "resource")
                        .WithMany("clientResources")
                        .HasForeignKey("resourceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("client");

                    b.Navigation("resource");
                });

            modelBuilder.Entity("BlockChainIdentity.Domain.Entities.Token", b =>
                {
                    b.HasOne("BlockChainIdentity.Domain.Entities.Wallet", "wallet")
                        .WithMany("tokens")
                        .HasForeignKey("walletAddress")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("wallet");
                });

            modelBuilder.Entity("BlockChainIdentity.Domain.Entities.WalletRole", b =>
                {
                    b.HasOne("BlockChainIdentity.Domain.Entities.Role", "role")
                        .WithMany("walletRoles")
                        .HasForeignKey("roleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BlockChainIdentity.Domain.Entities.Wallet", "wallet")
                        .WithMany("walletRoles")
                        .HasForeignKey("walletAddress")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("role");

                    b.Navigation("wallet");
                });

            modelBuilder.Entity("BlockChainIdentity.Domain.Entities.Client", b =>
                {
                    b.Navigation("clientResources");
                });

            modelBuilder.Entity("BlockChainIdentity.Domain.Entities.Resource", b =>
                {
                    b.Navigation("clientResources");
                });

            modelBuilder.Entity("BlockChainIdentity.Domain.Entities.Role", b =>
                {
                    b.Navigation("walletRoles");
                });

            modelBuilder.Entity("BlockChainIdentity.Domain.Entities.Wallet", b =>
                {
                    b.Navigation("tokens");

                    b.Navigation("walletRoles");
                });
#pragma warning restore 612, 618
        }
    }
}
